package db;

import db.handers.ResultSetHandler;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;

/**
 * 数据库操作工具
 * Created by hua on 2017/7/20.
 */
public class JdbcUtil {

    private static String driver = null;
    private static String url = null;
    private static String username = null;
    private static String password = null;

    static {
        try {
            InputStream inputStream = JdbcUtil.class.getClassLoader().getResourceAsStream("db.properties");
            Properties properties = new Properties();
            properties.load(inputStream);
            driver = properties.getProperty("driver");
            url = properties.getProperty("url");
            username = properties.getProperty("username");
            password = properties.getProperty("password");

            Class.forName(driver);

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, username, password);
    }


    public static void release(Connection con, Statement st, ResultSet rs) {
        release(con);
        release(st);
        release(rs);
    }

    public static void release(Connection con) {

        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }

    public static void release(Statement st) {

        if (st != null) {
            try {
                st.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }

    public static void release(ResultSet rs) {

        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }

    /**
     * 通用数据库查询方法
     *
     * @param sql     sql语句
     * @param params  占位符参数
     * @param handler 返回结果处理
     */
    @SuppressWarnings("unchecked")
    public static <T> T query(String sql, Object[] params, ResultSetHandler handler) {
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            pst = con.prepareStatement(sql);
            if (params != null) {
                for (int i = 0; i < params.length; i++) {
                    pst.setObject(i + 1, params[i]);
                }
            }
            rs = pst.executeQuery();
            if (handler != null) {
                return handler.handle(rs);
            } else {
                return (T) rs;
            }
        } catch (Exception e) {
            e.printStackTrace();
            //异常时需要释放rs
            release(con, pst, rs);
        } finally {
            //没有异常时不需要释放rs
            release(con, pst, null);
        }

        return null;
    }

    public static long update(String sql, Object[] params) {
        return update(sql, params, -1);
    }

    /**
     * 通用数据库更新（增、删、改）
     *
     * @param sql               sql语句
     * @param params            占位符参数。当为BLOB类型时，可传入{@link BLOBBean}对象
     * @param autoGeneratedKeys 同{@link Connection#prepareStatement(String, int)}的第二个参数
     * @return autoGeneratedKeys有值时为新插入的键值，否则为受影响的行数
     */
    public static long update(String sql, Object[] params, int autoGeneratedKeys) {
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        long sum = -1;
        try {
            con = getConnection();
            con.setAutoCommit(false);
            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                pst = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            } else {
                pst = con.prepareStatement(sql);
            }
            if (params != null) {
                for (int i = 0; i < params.length; i++) {
                    Object o = params[i];
                    if (o instanceof BLOBBean) {
                        BLOBBean bean = (BLOBBean) o;
                        pst.setBinaryStream(i + 1, bean.getInputStream(), bean.getLength());
                    } else {
                        pst.setObject(i + 1, o);
                    }
                }
            }
            sum = pst.executeUpdate();
            if (sum == 0) {
                con.rollback();
            }
            con.commit();
            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                rs = pst.getGeneratedKeys();
                if (rs != null && rs.next()) {
                    sum = (long) rs.getObject(1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            release(con, pst, rs);
        }
        return sum;
    }


}
